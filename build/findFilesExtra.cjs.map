{"version":3,"file":"findFilesExtra.cjs","sources":["../src/findFilesExtra.ts"],"sourcesContent":["import fs from \"fs-extra\";\nimport path from \"path\";\nimport glob from \"glob-promise\";\n\nexport interface IFindFileExtraFileInfo {\n  fullPath: string;\n  pathFromRoot: string;\n  fileName: string;\n  dirFullPath: string;\n  dirPathFromRoot: string;\n  ext: string;\n  json?: unknown;\n  content?: string;\n}\n\nexport interface IFindFilesExtraOptions {\n  root: string;\n  filePattern?: string;\n  ignoreFilePattern?: string[];\n  fileContentPattern?: RegExp | string;\n  loadFileContent?: boolean;\n  parseJson?: boolean;\n  dot?: boolean;\n  nocase?: boolean;\n}\n\nconst findFilesExtra = async (opt: IFindFilesExtraOptions) => {\n  let {\n    root,\n    filePattern = \"**/*.*\",\n    ignoreFilePattern = [\"**/bin/**\", \"**/node_modules/**\", \"**/obj/**\"],\n    fileContentPattern,\n    loadFileContent = false,\n    parseJson = false,\n    dot = true,\n    nocase = true,\n  } = opt;\n\n  if (!loadFileContent && parseJson) {\n    throw new Error(\"findFileExtra: parseJson is only available when loadFileContent is true\");\n  }\n\n  let fileNames = await glob(filePattern, {\n    ignore: ignoreFilePattern,\n    cwd: root,\n    nocase,\n    dot,\n  });\n\n  const files: IFindFileExtraFileInfo[] = [];\n\n  for (const pathFromRoot of fileNames) {\n    const fullPath = path.join(root, pathFromRoot);\n    const fileName = path.basename(fullPath);\n    const dirFullPath = path.dirname(fullPath);\n    const dirPathFromRoot = path.dirname(pathFromRoot);\n    const ext = path.extname(fullPath);\n    let content: string | undefined;\n    let json: unknown | undefined = undefined;\n\n    if (fileContentPattern || loadFileContent) {\n      content = await fs.readFile(fullPath, \"utf8\");\n      if (fileContentPattern) {\n        if (fileContentPattern instanceof RegExp && !fileContentPattern.test(content)) {\n          continue;\n        } else if (typeof fileContentPattern === \"string\" && content.indexOf(fileContentPattern) === -1) {\n          continue;\n        }\n      }\n    }\n\n    if (!loadFileContent) {\n      content = undefined;\n    }\n\n    if (content && parseJson && ext === \".json\") {\n      json = JSON.parse(content);\n    }\n\n    files.push({\n      fullPath,\n      pathFromRoot,\n      dirPathFromRoot,\n      fileName,\n      dirFullPath,\n      ext: ext,\n      json: json,\n      content: loadFileContent ? content : undefined,\n    });\n  }\n\n  return files;\n};\n\nexport default findFilesExtra;\n"],"names":["_settle","pact","state","value","s","_Pact","v","then","bind","onFulfilled","onRejected","result","this","callback","e","_this","opt","root","filePattern","_opt$filePattern","_opt$ignoreFilePatter","ignoreFilePattern","fileContentPattern","_opt$loadFileContent","loadFileContent","parseJson","_opt$parseJson","dot","_opt$dot","_opt$nocase","nocase","Error","glob","ignore","cwd","fileNames","files","pathFromRoot","_temp2","content","undefined","ext","json","JSON","parse","push","fullPath","dirPathFromRoot","fileName","dirFullPath","path","join","basename","dirname","extname","Promise","resolve","fs","readFile","_fs$readFile","RegExp","test","indexOf","_temp","_temp3","reject"],"mappings":"qTA6EK,SAAAA,EAAAC,EAAAC,EAAAC,SAEIC,EAAC,iBACIC,EAAA,OACID,EAOb,gBADQJ,cAAoBE,IALZ,QACPC,EAAAC,GAERD,EAAAA,EAAQG,CAMZ,CACA,GAAAH,GAAAA,EAAAI,iBAEFJ,EAAAI,KAAAP,YAA8BC,EAAAC,GAAAF,EAAAQ,KAAA,KAAAP,EAAA,uCA7FbI,eAAO,WACjB,SAAAA,YAwBPA,iBAAuB,SAAkCI,EAAIC,GAC3D,IAAIC,EAES,IAAAN,IASRO,KAAAR,EACH,GAAAF,EAAA,CACD,IAAAW,EAAA,EAAAX,EAAAO,EAAAC,EAED,GAAAG,EAAa,CACX,IACAb,EAAKW,EAAI,EAAAE,EAAAD,KAAAN,GAGV,OAFOQ,KACHH,EAAA,EAAAG,EACJ,CAED,QAEA,aAkBG,cAdK,SAAAC,OAEN,QAAgCT,EACA,EAAhCS,EAAIX,IAEAO,EAAA,EAAAF,EAAsBA,EAAiBN,GAAAA,GAClCO,EACPV,EAAAW,MAAwBR,QAEX,EAAAA,EAGV,CAFM,MAAAW,OACL,EAASA,EACV,CACF,EACFH,GAIAN,CAAA,CAxEmB,6DAyBJ,SAAUW,GAA2B,IACvD,MASIA,EARFC,KAQED,EAAAA,EAPFE,YAAAA,OAAW,IAAAC,EAAG,SAAQA,EAAAC,EAOpBJ,EANFK,kBAAAA,OAAoB,IAAAD,EAAA,CAAC,YAAa,qBAAsB,eACxDE,EAKEN,EALFM,mBAAkBC,EAKhBP,EAJFQ,gBAAAA,OAAkB,IAAAD,GAIhBP,EAAAA,EAAAA,EAHFS,UAAAA,OAAY,IAAAC,GAGVV,EAAAA,EAAAA,EAFFW,IAAAA,OAAG,IAAAC,GAAOA,EAAAC,EAERb,EADFc,OAAAA,OAAS,IAAAD,GAGXA,EAAA,IAAKL,GAAmBC,EACtB,MAAUM,IAAAA,MAAM,2EACjB,OAEqBC,QAAAA,QAAAA,EAAI,QAACd,EAAa,CACtCe,OAAQZ,EACRa,IAAKjB,EACLa,OAAAA,EACAH,IAAAA,KACApB,KAAA,SALE4B,GAOJ,IAAWC,EAA6B,GAEbD,+uBAAAA,CAAAA,EAAhBE,SAAAA,GAA2B,SAAAC,IAoB/Bd,IACHe,OAAUC,GAGRD,GAAWd,GAAqB,UAARgB,IAC1BC,EAAOC,KAAKC,MAAML,IAGpBH,EAAMS,KAAK,CACTC,SAAAA,EACAT,aAAAA,EACAU,gBAAAA,EACAC,SAAAA,EACAC,YAAAA,EACAR,IAAKA,EACLC,KAAMA,EACNH,QAASf,EAAkBe,OAAUC,GACpC,CApCH,IAKID,EALEO,EAAWI,EAAAA,QAAKC,KAAKlC,EAAMoB,GACnBW,EAAGE,EAAI,QAACE,SAASN,GACzBG,EAAcC,EAAI,QAACG,QAAQP,KACTI,EAAI,QAACG,QAAQhB,GAC5BI,EAAGS,EAAI,QAACI,QAAQR,GAEjBJ,OAAwBF,kBAE5BlB,GAAsBE,EAAe,OAAA+B,QAAAC,QACvBC,EAAAA,QAAGC,SAASZ,EAAU,SAAtCP,KAAAA,SAAAA,GAA8C,GAA9CA,EAA6CoB,EACzCrC,EAAkB,GAChBA,aAAoCsC,SAAKtC,EAAmBuC,KAAKtB,SAE9D,GAAkC,iBAAvBjB,IAA4E,IAAzCiB,EAAQuB,QAAQxC,GAA4B,MAEhG,EAAA,IAAA,OAAAyC,GAAAA,EAAAxD,KAAAwD,EAAAxD,KAAA+B,GAAAA,GAsBN,GAAA,OAAA0B,GAAAA,EAAAzD,KAAAyD,EAAAzD,KAAA,WAED,OAAa6B,CAAA,GAANA,CAAK,EACb,CAAA,MAAAtB,GAAA,OAAAyC,QAAAU,OAAAnD,EAAA,CAAA"}