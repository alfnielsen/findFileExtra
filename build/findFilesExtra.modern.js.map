{"version":3,"file":"findFilesExtra.modern.js","sources":["../src/findFilesExtra.ts"],"sourcesContent":["import fs from \"fs-extra\";\nimport path from \"path\";\nimport glob from \"glob-promise\";\n\nexport interface IFindFileExtraFileInfo {\n  fullPath: string;\n  pathFromRoot: string;\n  fileName: string;\n  dirFullPath: string;\n  dirPathFromRoot: string;\n  ext: string;\n  json?: unknown;\n  content?: string;\n}\n\nexport interface IFindFilesExtraOptions {\n  root: string;\n  filePattern?: string;\n  ignoreFilePattern?: string[];\n  fileContentPattern?: RegExp | string;\n  loadFileContent?: boolean;\n  parseJson?: boolean;\n  dot?: boolean;\n  nocase?: boolean;\n}\n\nconst findFilesExtra = async (opt: IFindFilesExtraOptions) => {\n  let {\n    root,\n    filePattern = \"**/*.*\",\n    ignoreFilePattern = [\"**/bin/**\", \"**/node_modules/**\", \"**/obj/**\"],\n    fileContentPattern,\n    loadFileContent = false,\n    parseJson = false,\n    dot = true,\n    nocase = true,\n  } = opt;\n\n  if (!loadFileContent && parseJson) {\n    throw new Error(\"findFileExtra: parseJson is only available when loadFileContent is true\");\n  }\n\n  let fileNames = await glob(filePattern, {\n    ignore: ignoreFilePattern,\n    cwd: root,\n    nocase,\n    dot,\n  });\n\n  const files: IFindFileExtraFileInfo[] = [];\n\n  for (const pathFromRoot of fileNames) {\n    const fullPath = path.join(root, pathFromRoot);\n    const fileName = path.basename(fullPath);\n    const dirFullPath = path.dirname(fullPath);\n    const dirPathFromRoot = path.dirname(pathFromRoot);\n    const ext = path.extname(fullPath);\n    let content: string | undefined;\n    let json: unknown | undefined = undefined;\n\n    if (fileContentPattern || loadFileContent) {\n      content = await fs.readFile(fullPath, \"utf8\");\n      if (fileContentPattern) {\n        if (fileContentPattern instanceof RegExp && !fileContentPattern.test(content)) {\n          continue;\n        } else if (typeof fileContentPattern === \"string\" && content.indexOf(fileContentPattern) === -1) {\n          continue;\n        }\n      }\n    }\n\n    if (!loadFileContent) {\n      content = undefined;\n    }\n\n    if (content && parseJson && ext === \".json\") {\n      json = JSON.parse(content);\n    }\n\n    files.push({\n      fullPath,\n      pathFromRoot,\n      dirPathFromRoot,\n      fileName,\n      dirFullPath,\n      ext: ext,\n      json: json,\n      content: loadFileContent ? content : undefined,\n    });\n  }\n\n  return files;\n};\n\nexport default findFilesExtra;\n"],"names":["findFilesExtra","async","root","filePattern","ignoreFilePattern","fileContentPattern","loadFileContent","parseJson","dot","nocase","opt","fileNames","ignore","cwd","files","pathFromRoot","fullPath","path","join","fileName","basename","dirFullPath","dirname","dirPathFromRoot","ext","extname","json","content","fs","readFile","RegExp","test","indexOf","undefined","JSON","parse","push"],"mappings":"wEA0BMA,MAAAA,EAAiBC,UACrB,IAAIC,KACFA,EAAIC,YACJA,EAAc,SAAQC,kBACtBA,EAAoB,CAAC,YAAa,qBAAsB,aAAYC,mBACpEA,EAAkBC,gBAClBA,GAAkB,EAAKC,UACvBA,GAAY,EAAKC,IACjBA,GAAM,EAAIC,OACVA,GAAS,GACPC,EAEJ,IAAKJ,GAAmBC,EACtB,MAAM,UAAU,2EAGlB,IAAII,UAAuBR,EAAa,CACtCS,OAAQR,EACRS,IAAKX,EACLO,SACAD,QAGF,MAAMM,EAAkC,GAExC,IAAK,MAAkBC,OAAe,CACpC,MAAMC,EAAWC,EAAKC,KAAKhB,EAAMa,GAC3BI,EAAWF,EAAKG,SAASJ,GACdK,EAAGJ,EAAKK,QAAQN,GACZO,EAAGN,EAAKK,QAAQP,GAC/BS,EAAMP,EAAKQ,QAAQT,GACzB,MACQU,EAER,IAAIrB,GAAsBC,KACxBqB,QAAgBC,EAAGC,SAASb,EAAU,QAClCX,GAAoB,CACtB,GAAIA,aAA8ByB,SAAWzB,EAAmB0B,KAAKJ,GACnE,SACK,GAAkC,iBAALtB,IAA0D,IAAzCsB,EAAQK,QAAQ3B,GACnE,QAEH,CAGEC,IACHqB,OAAUM,GAGRN,GAAWpB,GAAqB,UAARiB,IAC1BE,EAAOQ,KAAKC,MAAMR,IAGpBb,EAAMsB,KAAK,CACTpB,WACAD,eACAQ,kBACAJ,WACAE,cACAG,IAAKA,EACLE,KAAMA,EACNC,QAASrB,EAAkBqB,OAAUM,GAExC,CAED,OAAOnB"}